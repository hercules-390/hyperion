ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             1 *
                                                                             2 *  1. Multiply adjacent pairs of values in the input set (five values means four
                                                                             3 *     products).
                                                                             4 *     Test data: 1, 2, 4, -2, -2; expected products 2, 8, -8, 4
                                                                             5 *
                                                                             6 *  2. Multiply adjacent pairs of values in the input set and add the first value
                                                                             7 *     in the pair to the product (five values means four results).
                                                                             8 *     Test data: 1, 2, 4, -2, -2; expected results 3, 10, -4, 2
                                                                             9 *
                                                                            10 *  3. Multiply adjacent pairs of values in the input set and subtract the first
                                                                            11 *     value in the pair from the product (five values means four results).
                                                                            12 *     Test data: 1, 2, 4, -2, -2; expected results 1, 6, -12, 6
                                                                            13 *
                                                                            14 * Tests 17  multiplication instructions:
                                                                            15 *   MULTIPLY (BFP short x short -> short, RRE) MEEBR
                                                                            16 *   MULTIPLY (BFP short x short -> short, RXE) MEEB
                                                                            17 *   MULTIPLY (BFP short x short -> long, RRE) MDEBR
                                                                            18 *   MULTIPLY (BFP short x short -> long, RXE) MDEB
                                                                            19 *   MULTIPLY (BFP long x long -> long, RRE) MDBR
                                                                            20 *   MULTIPLY (BFP long x long -> long, RXE) MDB
                                                                            21 *   MULTIPLY (BFP long x long -> extended, RRE) MXDBR
                                                                            22 *   MULTIPLY (BFP long x long -> extended, RXE) MXDB
                                                                            23 *   MULTIPLY (BFP long x long -> extended, RRE) MXDBR
                                                                            24 *   MULTIPLY AND ADD (BFP short x short -> short, RRE) MAEBR
                                                                            25 *   MULTIPLY AND ADD (BFP short x short -> short, RXE) MAEB
                                                                            26 *   MULTIPLY AND ADD (BFP long x long -> long, RRE) MADBR
                                                                            27 *   MULTIPLY AND ADD (BFP long x long -> long, RXE) MADB
                                                                            28 *   MULTIPLY AND SUBTRACT (BFP short x short -> short, RRE) MSEBR
                                                                            29 *   MULTIPLY AND SUBTRACT (BFP short x short -> short, RXE) MSEB
                                                                            30 *   MULTIPLY AND SUBTRACT (BFP long x long -> long, RRE) MSDBR
                                                                            31 *   MULTIPLY AND SUBTRACT (BFP long x long -> long, RXE) MSDB
                                                                            32 *
                                                                            33 * Also tests the following six conversion instructions
                                                                            34 *   LOAD LENGTHENED (short BFP to long BFP, RXE)
                                                                            35 *   LOAD LENGTHENED (short BFP to extended BFP, RXE)
                                                                            36 *   LOAD LENGTHENED (long BFP to extended BFP, RXE)
                                                                            37 *   LOAD LENGTHENED (short BFP to long BFP, RRE)
                                                                            38 *   LOAD LENGTHENED (short BFP to extended BFP, RRE)
                                                                            39 *   LOAD LENGTHENED (long BFP to extended BFP, RRE)
                                                                            40 *
                                                                            41 * Intermediate results from the Load Lengthened instructions are not saved.  Because
                                                                            42 * zero is not present in the input test set, any error in Load Lengthened will appear
                                                                            43 * in the resulting products
                                                                            44 *
                                                                            45 * Also tests the following floating point support instructions
                                                                            46 *   LOAD  (Short)
                                                                            47 *   LOAD  (Long)
                                                                            48 *   LOAD ZERO (Long)
                                                                            49 *   STORE (Short)
                                                                            50 *   STORE (Long)
                                                                            51 *
                                      0000000000000000  00000000000007DB    52 BFPMULTS START 0
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                      0000000000000000  0000000000000001    53 R0       EQU   0
                                      0000000000000001  0000000000000001    54 R1       EQU   1
                                      0000000000000002  0000000000000001    55 R2       EQU   2
                                      0000000000000003  0000000000000001    56 R3       EQU   3
                                      0000000000000004  0000000000000001    57 R4       EQU   4
                                      0000000000000005  0000000000000001    58 R5       EQU   5
                                      0000000000000006  0000000000000001    59 R6       EQU   6
                                      0000000000000007  0000000000000001    60 R7       EQU   7
                                      0000000000000008  0000000000000001    61 R8       EQU   8
                                      0000000000000009  0000000000000001    62 R9       EQU   9
                                      000000000000000A  0000000000000001    63 R10      EQU   10
                                      000000000000000B  0000000000000001    64 R11      EQU   11
                                      000000000000000C  0000000000000001    65 R12      EQU   12
                                      000000000000000D  0000000000000001    66 R13      EQU   13
                                      000000000000000E  0000000000000001    67 R14      EQU   14
                                      000000000000000F  0000000000000001    68 R15      EQU   15
0000000000000000                      0000000000000000                      69          USING *,0
0000000000000000                      0000000000000000  00000000000001A0    70          ORG   BFPMULTS+X'1A0'
00000000000001A0  00000001 80000000                                         71          DC    X'0000000180000000',AD(STARTMUL)       z/Arch restart PSW
00000000000001B0                      00000000000001B0  00000000000001D0    72          ORG   BFPMULTS+X'1D0'
00000000000001D0  00020000 00000000                                         73          DC    X'0002000000000000000000000000DEAD' z/Arch pgm chk new PSW
00000000000001E0                      00000000000001E0  0000000000000200    74          ORG   BFPMULTS+X'200'
                                                                            75 *
                                                                            76 *
0000000000000200  B600 07D8                             00000000000007D8    77 STARTMUL STCTL R0,R0,CTLR0    Store CR0 to enable AFP
0000000000000204  9604 07D9                             00000000000007D9    78          OI    CTLR0+1,X'04'  Turn on AFP bit
0000000000000208  B700 07D8                             00000000000007D8    79          LCTL  R0,R0,CTLR0    Reload updated CR0
000000000000020C  45C0 0600                             0000000000000600    80          BAL   R12,TESTMULT   Perform multiplications
0000000000000210  B2B2 07C8                             00000000000007C8    81          LPSWE WAITPSW        All done, load disabled wait PSW
                                                                            82 *
                                                                            83 * BFP Multiplication Short x Short -> Short & Short x Short -> Long, RXE and RRE
                                                                            84 *
0000000000000214                      0000000000000214  0000000000000600    85          ORG   BFPMULTS+X'600'
0000000000000600                                                            86 TESTMULT DS    0H
0000000000000600  4120 0004                             0000000000000004    87          LA    R2,4          Set count of multiplication operations
0000000000000604  4130 0420                             0000000000000420    88          LA    R3,SHORTRES   Point to start of short BFP products
0000000000000608  4140 0440                             0000000000000440    89          LA    R4,LONGRES1   Point to start of long BFP products
000000000000060C  4150 04C0                             00000000000004C0    90          LA    R5,SHORTMAD   Point to start of short BFP Mult-Add results
0000000000000610  4160 04E0                             00000000000004E0    91          LA    R6,SHORTMSB   Point to start of short BFP Mult-Sub results
0000000000000614  4170 0400                             0000000000000400    92          LA    R7,SHORTBFP   Point to start of short BFP input values
0000000000000618  0DD0                                                      93          BASR  R13,0         Set top of loop
                                                                            94 *     Top of loop; clear residuals from FP registers
000000000000061A  B375 0000                                                 95          LZDR  R0            Zero FPR0
000000000000061E  B375 0010                                                 96          LZDR  R1            Zero FPR1
0000000000000622  B375 0040                                                 97          LZDR  R4            Zero FPR4
0000000000000626  B375 0050                                                 98          LZDR  R5            Zero FPR5
000000000000062A  B375 00D0                                                 99          LZDR  R13           Zero FPR13
                                                                           100 *     Collect multiplicand and multiplier, do four multiplications, store results.
000000000000062E  7800 7000                             0000000000000000   101          LE    R0,0(0,R7)    Get BFP short multiplicand
0000000000000632  78D0 7004                             0000000000000004   102          LE    R13,4(0,R7)   Get BFP short multiplier
0000000000000636  3810                                                     103          LER   R1,R0         Copy multiplicand for s*s->s RRE
0000000000000638  3840                                                     104          LER   R4,R0         Copy multiplicand for s*s->l RXE
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

000000000000063A  3850                                                     105          LER   R5,R0         Copy multiplicand for s*s->l RRE
000000000000063C  ED00 7004 0017                        0000000000000004   106          MEEB  R0,4(0,R7)    Generate RXE s*s->s product
0000000000000642  B317 001D                                                107          MEEBR R1,R13        Generate RRE s*s->s product
0000000000000646  ED40 7004 000C                        0000000000000004   108          MDEB  R4,4(0,R7)    Generate RXE s*s->l product
000000000000064C  B30C 005D                                                109          MDEBR R5,R13        Generate RRE s*s->l product
0000000000000650  7000 3000                             0000000000000000   110          STE   R0,0(0,R3)    Store short BFP RXE s*s->s product
0000000000000654  7010 3004                             0000000000000004   111          STE   R1,4(0,R3)    Store short BFP RRE s*s->s product
0000000000000658  7040 4000                             0000000000000000   112          STE   R4,0(0,R4)    Store short BFP RXE s*s->l product
000000000000065C  7050 4008                             0000000000000008   113          STE   R5,8(0,R4)    Store short BFP RRE s*s->l product
0000000000000660  7800 7000                             0000000000000000   114          LE    R0,0(0,R7)    Reload BFP short multiplicand for mult-add RXE
0000000000000664  3810                                                     115          LER   R1,R0         Copy multiplicand for mult-add RRE
0000000000000666  ED00 7004 000E                        0000000000000004   116          MAEB  R0,R0,4(0,R7) Multiply third by second, add to first RXE
000000000000066C  B30E 10D1                                                117          MAEBR R1,R13,R1     Multiply third by second, add to the first RRE
0000000000000670  7000 5000                             0000000000000000   118          STE   R0,0(0,R5)    Store short BFP RXE mult-add result
0000000000000674  7010 5004                             0000000000000004   119          STE   R1,4(0,R5)    Store short BFP RRE mult-add result
0000000000000678  7800 7000                             0000000000000000   120          LE    R0,0(0,R7)    Reload BFP short multiplicand for mult-sub RXE
000000000000067C  3810                                                     121          LER   R1,R0         Copy multiplicand for mult-sub RRE
000000000000067E  ED00 7004 000F                        0000000000000004   122          MSEB  R0,R0,4(0,R7) Multiply third by second, subtract the first RXE
0000000000000684  B30F 10D1                                                123          MSEBR R1,R13,R1     Multiply third by second, subtract the first RRE
0000000000000688  7000 6000                             0000000000000000   124          STE   R0,0(0,R6)    Store short BFP RXE mult-sub result
000000000000068C  7010 6004                             0000000000000004   125          STE   R1,4(0,R6)    Store short BFP RRE mult-sub result
0000000000000690  4170 7004                             0000000000000004   126          LA    R7,4(0,R7)    Point to next short BFP input pair
0000000000000694  4130 3008                             0000000000000008   127          LA    R3,8(0,R3)    Point to next short BFP product pair
0000000000000698  4140 4010                             0000000000000010   128          LA    R4,16(0,R4)   Point to next long BFP product pair
000000000000069C  4150 5008                             0000000000000008   129          LA    R5,8(0,R5)    Point to next short BFP mult-add result pair
00000000000006A0  4160 6008                             0000000000000008   130          LA    R6,8(0,R6)    Point to next short BFP mult-sub result pair
00000000000006A4  062D                                                     131          BCTR  R2,R13        Loop through all s*s test cases
                                                                           132 *
                                                                           133 * BFP Multiplication long x long -> long & long x long -> extended, RXE and RRE
                                                                           134 * Use Load Lengthened to expand Short BFP into the longs needed for this test.
                                                                           135 *
00000000000006A6                                                           136 TESTLONG DS    0H
00000000000006A6  4120 0004                             0000000000000004   137          LA    R2,4          Set count of multiplication operations
00000000000006AA  4130 0480                             0000000000000480   138          LA    R3,LONGRES2   Point to start of long BFP products
00000000000006AE  4140 0500                             0000000000000500   139          LA    R4,EXTDRES1   Point to start of extended BFP products
00000000000006B2  4150 0300                             0000000000000300   140          LA    R5,LONGMAD    Point to start of long BFP Mult-Add results
00000000000006B6  4160 0340                             0000000000000340   141          LA    R6,LONGMSB    Point to start of long BFP Mult-Sub results
00000000000006BA  4170 0400                             0000000000000400   142          LA    R7,SHORTBFP   Point to start of short BFP input values
00000000000006BE  0DD0                                                     143          BASR  R13,0         Set top of loop for l*l tests
                                                                           144 *     Top of loop; clear residuals from FP registers
00000000000006C0  B375 0000                                                145          LZDR  R0            Zero FPR0
00000000000006C4  B375 0010                                                146          LZDR  R1            Zero FPR1
00000000000006C8  B375 0040                                                147          LZDR  R4            Zero FPR4
00000000000006CC  B375 0050                                                148          LZDR  R5            Zero FPR5
00000000000006D0  B375 00D0                                                149          LZDR  R13           Zero FPR13
                                                                           150 *     Collect multiplicand and multiplier, lengthen them, do four multiplications, store results.
00000000000006D4  7800 7000                             0000000000000000   151          LE    R0,0(0,R7)    Get BFP short multiplicand
00000000000006D8  EDD0 7004 0004                        0000000000000004   152          LDEB  R13,4(0,R7)   Lengthen BFP short multiplier into long RXE
00000000000006DE  60D0 3000                             0000000000000000   153          STD   R13,0(0,R3)   Store for use in MDB/MXDB tests
00000000000006E2  60D0 5000                             0000000000000000   154          STD   R13,0(0,R5)   Store for use in MADB/MADBR tests
00000000000006E6  60D0 6000                             0000000000000000   155          STD   R13,0(0,R6)   Store for use in MSDB/MSDBR tests
00000000000006EA  B304 0010                                                156          LDEBR R1,R0         Lengthen multiplicand for l*l->l RRE
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000006EE  B304 0040                                                157          LDEBR R4,R0         Lengthen multiplicand for l*l->e RXE
00000000000006F2  B304 0050                                                158          LDEBR R5,R0         Lengthen multiplicand for l*l->e RRE
00000000000006F6  B304 0000                                                159          LDEBR R0,R0         Lengthen multiplicand for l*l->l RXE (This one must be last in the list)
00000000000006FA  28F0                                                     160          LDR   R15,R0        Save long multiplicand for MADB/MADBR/MSDB/MSDBR tests
00000000000006FC  ED00 3000 001C                        0000000000000000   161          MDB   R0,0(0,R3)    Generate RXE l*l->l product
0000000000000702  B31C 001D                                                162          MDBR  R1,R13        Generate RRE l*l->l product
0000000000000706  ED40 3000 0007                        0000000000000000   163          MXDB  R4,0(0,R3)    Generate RXE l*l->e product
000000000000070C  B307 005D                                                164          MXDBR R5,R13        Generate RRE l*l->e product
0000000000000710  6000 3000                             0000000000000000   165          STD   R0,0(0,R3)    Store BFP RXE l*l->l product
0000000000000714  6010 3008                             0000000000000008   166          STD   R1,8(0,R3)    Store BFP RRE l*l->l product
0000000000000718  6040 4000                             0000000000000000   167          STD   R4,0(0,R4)    Store BFP RXE l*l->e product part 1
000000000000071C  6060 4008                             0000000000000008   168          STD   R6,8(0,R4)    Store BFP RXE l*l->e product part 2
0000000000000720  6050 4010                             0000000000000010   169          STD   R5,16(0,R4)   Store BFP RRE l*l->e product part 1
0000000000000724  6070 4018                             0000000000000018   170          STD   R7,24(0,R4)   Store BFP RRE l*l->e product part 2
0000000000000728  280F                                                     171          LDR   R0,R15        Reload BFP long multiplicand for mult-add RXE
000000000000072A  2810                                                     172          LDR   R1,R0         Copy multiplicand for mult-add RRE
000000000000072C  ED00 5000 001E                        0000000000000000   173          MADB  R0,R0,0(0,R5) Multiply third by second, add to first RXE
0000000000000732  B31E 10D1                                                174          MADBR R1,R13,R1     Multiply third by second, add to the first RRE
0000000000000736  6000 5000                             0000000000000000   175          STD   R0,0(0,R5)    Store long BFP RXE mult-add result
000000000000073A  6010 5008                             0000000000000008   176          STD   R1,8(0,R5)    Store long  BFP RRE mult-add result
000000000000073E  280F                                                     177          LDR   R0,R15        Reload BFP long multiplicand for mult-sub RXE
0000000000000740  2810                                                     178          LDR   R1,R0         Copy multiplicand for mult-sub RRE
0000000000000742  ED00 6000 001F                        0000000000000000   179          MSDB  R0,R0,0(0,R6) Multiply third by second, subtract the first RXE
0000000000000748  B31F 10D1                                                180          MSDBR R1,R13,R1     Multiply third by second, subtract the first RRE
000000000000074C  6000 6000                             0000000000000000   181          STD   R0,0(0,R6)    Store long BFP RXE mult-sub result
0000000000000750  6010 6008                             0000000000000008   182          STD   R1,8(0,R6)    Store long BFP RRE mult-sub result
0000000000000754  4170 7004                             0000000000000004   183          LA    R7,4(0,R7)    Point to next short BFP input pair
0000000000000758  4130 3010                             0000000000000010   184          LA    R3,16(0,R3)   Point to next long BFP product pair
000000000000075C  4140 4020                             0000000000000020   185          LA    R4,32(0,R4)   Point to next extended BFP product pair
0000000000000760  4150 5010                             0000000000000010   186          LA    R5,16(0,R5)   Point to next long BFP mult-add result pair
0000000000000764  4160 6010                             0000000000000010   187          LA    R6,16(0,R6)   Point to next long BFP mult-sub result pair
0000000000000768  062D                                                     188          BCTR  R2,R13        Loop through all l*l cases
                                                                           189 *
                                                                           190 * BFP Multiplication extended x extended -> extended, RRE only.  We do two multiplies
                                                                           191 * per input pair so we can test a diversity of Load Lengthened instructions
                                                                           192 *
000000000000076A                                                           193 TESTEXT  DS    0H
000000000000076A  4120 0004                             0000000000000004   194          LA    R2,4          Set count of multiplication operations
000000000000076E  4140 0580                             0000000000000580   195          LA    R4,EXTDRES2   Point to start of extended BFP results
0000000000000772  4170 0400                             0000000000000400   196          LA    R7,SHORTBFP   Point to start of short BFP input values
0000000000000776  0DD0                                                     197          BASR  R13,0         Set top of loop for e*e tests
                                                                           198 *     Top of loop
                                                                           199 *     Collect multiplicand and multiplier, lengthen them, do two multiplications, store results.
0000000000000778  7800 7000                             0000000000000000   200          LE    R0,0(0,R7)    Get BFP short multiplicand
000000000000077C  B306 0010                                                201          LXEBR R1,R0         Lengthen multiplicand into R1-R3 for e*e->e RRE (2)
0000000000000780  B304 0000                                                202          LDEBR R0,R0         lengthen multiplicand to long
0000000000000784  6000 4000                             0000000000000000   203          STD   R0,0(0,R4)    Save for test of LXDB RXE
0000000000000788  ED00 4000 0005                        0000000000000000   204          LXDB  R0,0(0,R4)    Load long multiplicand, lengthen for e*e->e RRE (1)
000000000000078E  EDD0 7004 0006                        0000000000000004   205          LXEB  R13,4(0,R7)   Lengthen BFP short multiplier into ext
0000000000000794  EDC0 7004 0004                        0000000000000004   206          LDEB  R12,4(0,R7)   lengthen short multiplier into long
000000000000079A  B305 00CC                                                207          LXDBR R12,R12       Lengthen long multiplier into ext
000000000000079E  B34C 000D                                                208          MXBR  R0,R13        Generate RRE (s->e) * (s->e) -> e
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

00000000000007A2  B34C 001C                                                209          MXBR  R1,R12        Generate RRE (s->l->e) * (s->l->e) -> e
00000000000007A6  6000 4000                             0000000000000000   210          STD   R0,0(0,R4)    Store BFP RRE e*e->e from short part 1
00000000000007AA  6020 4008                             0000000000000008   211          STD   R2,8(0,R4)    Store BFP RRE e*e->e ..part 2
00000000000007AE  6010 4010                             0000000000000010   212          STD   R1,16(0,R4)   Store BFP RRE e*e->e from short->long part 1
00000000000007B2  6030 4018                             0000000000000018   213          STD   R3,24(0,R4)   Store BFP RRE e*e->e ..part 2
00000000000007B6  4170 7004                             0000000000000004   214          LA    R7,4(0,R7)    Point to next short BFP input pair
00000000000007BA  4140 4020                             0000000000000020   215          LA    R4,32(0,R4)   Point to next extended BFP result pair
00000000000007BE  062D                                                     216          BCTR  R2,R13        Loop through all e*e cases
                                                                           217 *
00000000000007C0  07FC                                                     218          BR    R12           Tests done, return to mainline
                                                                           219 *
                                                                           220 *
                                                                           221 *
00000000000007C8                                                           222          DS    0D            Ensure correct alignment for PSW
00000000000007C8  00020000 00000000                                        223 WAITPSW  DC    X'00020000000000000000000000000000'  Disabled wait state PSW - normal completion
00000000000007D8  00000000                                                 224 CTLR0    DS    F             Control register 0 (bit45 AFP control)
                                                                           225 *
00000000000007DC                      00000000000007DC  0000000000000400   226          ORG   BFPMULTS+X'400'
0000000000000400                                                           227 SHORTBFP DS    0F            Ensure alignment
0000000000000400  3F800000                                                 228          DC    X'3F800000'     1 in short BFP
0000000000000404  40000000                                                 229          DC    X'40000000'     2
0000000000000408  40800000                                                 230          DC    X'40800000'     4
000000000000040C  C0000000                                                 231          DC    X'C0000000'     -2
0000000000000410  C0000000                                                 232          DC    X'C0000000'     -2
                                                                           233 *
                                      0000000000000300  0000000000000000   234 LONGMAD  EQU   BFPMULTS+X'300'   300.40     Results from (l*l)+l->l
                                      0000000000000340  0000000000000000   235 LONGMSB  EQU   BFPMULTS+X'340'   340.40     Results from (l*l)-l->l
                                      0000000000000420  0000000000000000   236 SHORTRES EQU   BFPMULTS+X'420'   420.20     Results from s*s->s
                                      0000000000000440  0000000000000000   237 LONGRES1 EQU   BFPMULTS+X'440'   440.40     Results from s*s->l
                                      0000000000000480  0000000000000000   238 LONGRES2 EQU   BFPMULTS+X'480'   480.40     Results from l*l->l
                                      00000000000004C0  0000000000000000   239 SHORTMAD EQU   BFPMULTS+X'4C0'   4C0.20     Results from (s*s)+s->s
                                      00000000000004E0  0000000000000000   240 SHORTMSB EQU   BFPMULTS+X'4E0'   4E0.20     Results from (s*s)-s->s
                                      0000000000000500  0000000000000000   241 EXTDRES1 EQU   BFPMULTS+X'500'   500.80     Results from l*l->e
                                      0000000000000580  0000000000000000   242 EXTDRES2 EQU   BFPMULTS+X'580'   580.80     Results from e*e->e
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     6

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

BFPMULTS            J    000000    2012    52   70   72   74   85  226  234  235  236  237  238  239  240  241  242
CTLR0               F    0007D8       4   224   77   78   79
EXTDRES1            U    000500       0   241  139
EXTDRES2            U    000580       0   242  195
IMAGE               1    000000    2012     0
LONGMAD             U    000300       0   234  140
LONGMSB             U    000340       0   235  141
LONGRES1            U    000440       0   237   89
LONGRES2            U    000480       0   238  138
R0                  U    000000       1    53   77   79   95  101  103  104  105  106  110  114  115  116  118  120  121  122  124
                                               145  151  156  157  158  159  160  161  165  171  172  173  175  177  178  179  181
                                               200  201  202  203  204  208  210
R1                  U    000001       1    54   96  103  107  111  115  117  119  121  123  125  146  156  162  166  172  174  176
                                               178  180  182  201  209  212
R10                 U    00000A       1    63
R11                 U    00000B       1    64
R12                 U    00000C       1    65   80  206  207  209  218
R13                 U    00000D       1    66   93   99  102  107  109  117  123  131  143  149  152  153  154  155  162  164  174
                                               180  188  197  205  208  216
R14                 U    00000E       1    67
R15                 U    00000F       1    68  160  171  177
R2                  U    000002       1    55   87  131  137  188  194  211  216
R3                  U    000003       1    56   88  110  111  127  138  153  161  163  165  166  184  213
R4                  U    000004       1    57   89   97  104  108  112  113  128  139  147  157  163  167  168  169  170  185  195
                                               203  204  210  211  212  213  215
R5                  U    000005       1    58   90   98  105  109  113  118  119  129  140  148  154  158  164  169  173  175  176
                                               186
R6                  U    000006       1    59   91  124  125  130  141  155  168  179  181  182  187
R7                  U    000007       1    60   92  101  102  106  108  114  116  120  122  126  142  151  152  170  183  196  200
                                               205  206  214
R8                  U    000008       1    61
R9                  U    000009       1    62
SHORTBFP            F    000400       4   227   92  142  196
SHORTMAD            U    0004C0       0   239   90
SHORTMSB            U    0004E0       0   240   91
SHORTRES            U    000420       0   236   88
STARTMUL            I    000200       4    77   71
TESTEXT             H    00076A       2   193
TESTLONG            H    0006A6       2   136
TESTMULT            H    000600       2    86   80
WAITPSW             X    0007C8      16   223   81
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     7

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     8

   DESC     SYMBOL   SIZE    POS      ADDR

Entry: 0

Image      IMAGE     2012  000-7DB  000-7DB
  Region             2012  000-7DB  000-7DB
    CSECT  BFPMULTS  2012  000-7DB  000-7DB
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:50  Page     9

   STMT                            FILE NAME

1     C:\Users\srorso\Documents\GitHub\hyperion\tests\ieee-mults.asm


** NO ERRORS FOUND **

