ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     1

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                             1 *
                                                                             2 * Tests five square root instructions:
                                                                             3 *   SQUARE ROOT (extended BFP, RRE)
                                                                             4 *   SQUARE ROOT (long BFP, RRE)
                                                                             5 *   SQUARE ROOT (long BFP, RXE)
                                                                             6 *   SQUARE ROOT (short BFP, RRE)
                                                                             7 *   SQUARE ROOT (short BFP, RXE)
                                                                             8 *
                                                                             9 * Also tests the following twelve conversion instructions
                                                                            10 *   CONVERT FROM FIXED (32 to short BFP, RRE)
                                                                            11 *   CONVERT FROM FIXED (32 to long BFP, RRE)
                                                                            12 *   CONVERT FROM FIXED (32 to extended BFP, RRE)
                                                                            13 *   CONVERT TO FIXED (32 to short BFP, RRE)
                                                                            14 *   CONVERT TO FIXED (32 to long BFP, RRE)
                                                                            15 *   CONVERT TO FIXED (32 to extended BFP, RRE)
                                                                            16 *   CONVERT FROM FIXED (64 to short BFP, RRE)
                                                                            17 *   CONVERT FROM FIXED (64 to long BFP, RRE)
                                                                            18 *   CONVERT FROM FIXED (64 to extended BFP, RRE)
                                                                            19 *   CONVERT TO FIXED (64 to short BFP, RRE)
                                                                            20 *   CONVERT TO FIXED (64 to long BFP, RRE)
                                                                            21 *   CONVERT TO FIXED (64 to extended BFP, RRE)
                                                                            22 *
                                                                            23 * Also tests the following floating point support instructions
                                                                            24 *   LOAD  (Short)
                                                                            25 *   LOAD  (Long)
                                                                            26 *   LOAD ZERO (Long)
                                                                            27 *   STORE (Short)
                                                                            28 *   STORE (Long)
                                                                            29 *
                                                                            30 *  Convert integers 1, 2, 4, 16 to each BFP floating point format
                                                                            31 *  Take the square root of each in each BFP format
                                                                            32 *  Convert back to integers (Note: SQRT(2) will/should round)
                                                                            33 *  Because all inputs must be positive, we'll use this rig to test
                                                                            34 *     logical (unsigned) conversions when that support is added to
                                                                            35 *     Hercules.   And we will test 32 and 64 bit logical conversions.
                                                                            36 *     The comments will still say "integers" though.
                                                                            37 *
                                      0000000000000000  00000000000009B5    38 BFPSQRTS START 0
                                      0000000000000000  0000000000000001    39 R0       EQU   0
                                      0000000000000001  0000000000000001    40 R1       EQU   1
                                      0000000000000002  0000000000000001    41 R2       EQU   2
                                      0000000000000003  0000000000000001    42 R3       EQU   3
                                      0000000000000004  0000000000000001    43 R4       EQU   4
                                      0000000000000005  0000000000000001    44 R5       EQU   5
                                      0000000000000006  0000000000000001    45 R6       EQU   6
                                      0000000000000007  0000000000000001    46 R7       EQU   7
                                      0000000000000008  0000000000000001    47 R8       EQU   8
                                      0000000000000009  0000000000000001    48 R9       EQU   9
                                      000000000000000A  0000000000000001    49 R10      EQU   10
                                      000000000000000B  0000000000000001    50 R11      EQU   11
                                      000000000000000C  0000000000000001    51 R12      EQU   12
                                      000000000000000D  0000000000000001    52 R13      EQU   13
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     2

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                      000000000000000E  0000000000000001    53 R14      EQU   14
                                      000000000000000F  0000000000000001    54 R15      EQU   15
0000000000000000                      0000000000000000                      55          USING *,0
0000000000000000                      0000000000000000  00000000000001A0    56          ORG   BFPSQRTS+X'1A0'
00000000000001A0  00000001 80000000                                         57          DC    X'0000000180000000',AD(STARTNAN)       z/Arch restart PSW
00000000000001B0                      00000000000001B0  00000000000001D0    58          ORG   BFPSQRTS+X'1D0'
00000000000001D0  00020000 00000000                                         59          DC    X'0002000000000000000000000000DEAD' z/Arch pgm chk new PSW
00000000000001E0                      00000000000001E0  0000000000000200    60          ORG   BFPSQRTS+X'200'
                                                                            61 *
                                                                            62 * Mainline program.
                                                                            63 *
0000000000000200  B600 0230                             0000000000000230    64 STARTNAN STCTL R0,R0,CTLR0    Store CR0 to enable AFP
0000000000000204  9604 0231                             0000000000000231    65          OI    CTLR0+1,X'04'  Turn on AFP bit
0000000000000208  B700 0230                             0000000000000230    66          LCTL  R0,R0,CTLR0    Reload updated CR0
000000000000020C  45C0 0882                             0000000000000882    67          BAL   R12,CVTINPUT   Convert inputs to binary formats
0000000000000210  45C0 0800                             0000000000000800    68          BAL   R12,TESTSQRT   Perform subtractions
0000000000000214  45C0 08EE                             00000000000008EE    69          BAL   R12,CVTOUTS    Convert results to integers
0000000000000218  B2B2 0220                             0000000000000220    70          LPSWE WAITPSW        All done, load enabled wait PSW
0000000000000220                                                            71          DS    0D            Ensure correct alignment for PSW
                                                                            72 *
                                                                            73 *
0000000000000220  00020000 00000000                                         74 WAITPSW  DC    X'00020000000000000000000000000000' Disabled wait state PSW - normal completion
0000000000000230  00000000                                                  75 CTLR0    DS    F             Control register 0 (bit45 AFP control)
                                                                            76 *
0000000000000234                      0000000000000234  0000000000000480    77          ORG   BFPSQRTS+X'480'
                                                                            78 * asma does not support doubleword integers, so we'll just do F'0' then F'value'
0000000000000480                                                            79 INTVALS  DS    0D            Four doublewords
0000000000000480  00000000                                                  80          DC    F'0'
0000000000000484  00000001                                                  81          DC    F'1'          first test integer
0000000000000488  00000000                                                  82          DC    F'0'
000000000000048C  00000002                                                  83          DC    F'2'          second test integer
0000000000000490  00000000                                                  84          DC    F'0'
0000000000000494  00000004                                                  85          DC    F'4'          third test integer
0000000000000498  00000000                                                  86          DC    F'0'
000000000000049C  00000010                                                  87          DC    F'16'         fourth test integer
                                                                            88 *
                                      0000000000000410  0000000000000000    89 SHORTBFP EQU   BFPSQRTS+X'410'    4F  410.10  four test cases in short bfp
                                      0000000000000420  0000000000000000    90 LONGBFP  EQU   BFPSQRTS+X'420'    4D  420.20  four test cases in long bfp
                                      0000000000000440  0000000000000000    91 EXTBFP   EQU   BFPSQRTS+X'440'    8D  440.40  four test cases in extended bfp
                                                                            92
                                      0000000000000500  0000000000000000    93 SHORTRES EQU   BFPSQRTS+X'500'    8F  500.20 Short square root results (4 pairs, RXE & RRE)
                                      0000000000000520  0000000000000000    94 LONGRES  EQU   BFPSQRTS+X'520'    8D  520.40 Long square root results (4 pairs, RXE & RRE)
                                      0000000000000560  0000000000000000    95 EXTRES   EQU   BFPSQRTS+X'560'    8D  560.40 Extended square root results (4, RRE only)
                                                                            96 *
                                      0000000000000A00  0000000000000000    97 ISHBFP   EQU   BFPSQRTS+X'A00'    8D  A00.40 Convert short BFP to Integer results
                                      0000000000000A40  0000000000000000    98 ILNBFP   EQU   BFPSQRTS+X'A40'    8D  A40.40 Convert long BFP to Integer results
                                      0000000000000A80  0000000000000000    99 IXTBFP   EQU   BFPSQRTS+X'A80'    8F  A80.20 Convert extended BFP to Integer results
00000000000004A0                      00000000000004A0  0000000000000800   100          ORG   BFPSQRTS+X'800'
                                                                           101 *
                                                                           102 *
                                                                           103 *
                                                                           104 * Take square roots of the four test cases in each precision
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     3

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

                                                                           105 *
0000000000000800                                                           106 TESTSQRT DS    0H
                                                                           107 * Calculate square roots of values
0000000000000800  4120 0004                             0000000000000004   108          LA    R2,4          Set count of square root operations
0000000000000804  4130 0500                             0000000000000500   109          LA    R3,SHORTRES   Point to start of short BFP results
0000000000000808  4140 0520                             0000000000000520   110          LA    R4,LONGRES    Point to start of long BFP results
000000000000080C  4150 0560                             0000000000000560   111          LA    R5,EXTRES     Point to start of extended BFP results
0000000000000810  4170 0410                             0000000000000410   112          LA    R7,SHORTBFP   Point to start of short BFP input values
0000000000000814  4180 0420                             0000000000000420   113          LA    R8,LONGBFP    Point to start of long BFP input values
0000000000000818  4190 0440                             0000000000000440   114          LA    R9,EXTBFP     Point to start of extended BFP input values
000000000000081C  0DD0                                                     115          BASR  R13,0         Set top of loop
                                                                           116 *     Top of loop; clear residuals from FPR0-1
000000000000081E  B375 0000                                                117 SQRTLOOP LZDR  R0            Zero FPR0
0000000000000822  B375 0010                                                118          LZDR  R1            Zero FPR1
                                                                           119 *     BFP Short square root RXE and RRE
0000000000000826  ED00 7000 0014                        0000000000000000   120          SQEB  R0,0(0,R7)    Put square root of test case in FPR0
000000000000082C  7000 3000                             0000000000000000   121          STE   R0,0(0,R3)    Store short BFP result from RXE
0000000000000830  7810 7000                             0000000000000000   122          LE    R1,0(0,R7)    Get test case for RRE instruction
0000000000000834  B314 0001                                                123          SQEBR R0,R1         Add BFP values, result in FPR0
0000000000000838  7000 3004                             0000000000000004   124          STE   R0,4(0,R3)    Store short BFP from RRE
000000000000083C  4170 7004                             0000000000000004   125          LA    R7,4(0,R7)    Point to next short BFP test case
0000000000000840  4130 3008                             0000000000000008   126          LA    R3,8(0,R3)    Point to next short BFP result pair
                                                                           127 *     BFP Long square root RXE and RRE
0000000000000844  ED00 8000 0015                        0000000000000000   128          SQDB  R0,0(0,R8)    Square root BFP long test case
000000000000084A  6000 4000                             0000000000000000   129          STD   R0,0(0,R4)    Store long BFP result from RXE
000000000000084E  6810 8000                             0000000000000000   130          LD    R1,0(0,R8)    Get BFP long test case
0000000000000852  B315 0001                                                131          SQDBR R0,R1         Take square root, result in FPR0
0000000000000856  6000 4008                             0000000000000008   132          STD   R0,8(0,R4)    Store long BFP from RRE
000000000000085A  4180 8008                             0000000000000008   133          LA    R8,8(0,R8)    Point to next long BFP test case
000000000000085E  4140 4010                             0000000000000010   134          LA    R4,16(0,R4)   Point to next long BFP result pair
                                                                           135 *     BFP Extended square root RRE
0000000000000862  6810 9000                             0000000000000000   136          LD    R1,0(0,R9)    Get BFP ext. 1st half of test case
0000000000000866  6830 9008                             0000000000000008   137          LD    R3,8(0,R9)    Get BFP ext. 2nd half of test case
000000000000086A  B316 0001                                                138          SQXBR R0,R1         Add BFP values, result in FPR0-FPR2
000000000000086E  6000 5000                             0000000000000000   139          STD   R0,0(0,R5)    Store ext. BFP from RRE
0000000000000872  6020 5008                             0000000000000008   140          STD   R2,8(0,R5)    Store ext. BFP from RRE
0000000000000876  4190 9010                             0000000000000010   141          LA    R9,16(0,R9)   Point to next ext. BFP input
000000000000087A  4150 5010                             0000000000000010   142          LA    R5,16(0,R5)   Point to next ext. BFP result
000000000000087E  062D                                                     143          BCTR  R2,R13        Square root next input pair
0000000000000880  07FC                                                     144          BR    R12           Return to caller
                                                                           145 *
                                                                           146 * Convert Integer test cases to each format of BFP.  Half will be converted as
                                                                           147 * 32-bit unsigned integers, and the rest as 64-bit unsigned integers.
                                                                           148 *
0000000000000882                                                           149 CVTINPUT DS    0H
0000000000000882  4120 0002                             0000000000000002   150          LA    R2,2          Set count of test input values
0000000000000886  4130 0480                             0000000000000480   151          LA    R3,INTVALS    point to start of input values
000000000000088A  4170 0410                             0000000000000410   152          LA    R7,SHORTBFP   Point to start of short BFP input values
000000000000088E  4180 0420                             0000000000000420   153          LA    R8,LONGBFP    Point to start of long BFP input values
0000000000000892  4190 0440                             0000000000000440   154          LA    R9,EXTBFP     Point to start of extended BFP input values
0000000000000896  0DD0                                                     155          BASR  R13,0         Set top of loop
                                                                           156 * convert integers to three BFP formats.  32 bit first, then 64
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     4

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000898  5810 3004                             0000000000000004   157 CVTLOOP  L     R1,4(0,R3)    Get integer test value
000000000000089C  B394 0001                                                158          CEFBR R0,R1         Cvt Int in GPR1 to float in FPR0
00000000000008A0  7000 7000                             0000000000000000   159          STE   R0,0(0,R7)    Store short BFP
00000000000008A4  B395 0001                                                160          CDFBR R0,R1         Cvt Int in GPR1 to float in FPR0
00000000000008A8  6000 8000                             0000000000000000   161          STD   R0,0(0,R8)    Store long BFP
00000000000008AC  B396 0001                                                162          CXFBR R0,R1         Cvt Int in GPR1 to float in FPR0-FPR2
00000000000008B0  6000 9000                             0000000000000000   163          STD   R0,0(0,R9)    Store extended BFP part 1
00000000000008B4  6020 9008                             0000000000000008   164          STD   R2,8(0,R9)    Store extended BFP part 2
00000000000008B8  E310 3008 0004                        0000000000000008   165          LG    R1,8(0,R3)    Get integer test value
00000000000008BE  B3A4 0001                                                166          CEGBR R0,R1         Cvt Int in GPR1 to float in FPR0
00000000000008C2  7000 7004                             0000000000000004   167          STE   R0,4(0,R7)    Store short BFP
00000000000008C6  B3A5 0001                                                168          CDGBR R0,R1         Cvt Int in GPR1 to float in FPR0
00000000000008CA  6000 8008                             0000000000000008   169          STD   R0,8(0,R8)    Store long BFP
00000000000008CE  B3A6 0001                                                170          CXGBR R0,R1         Cvt Int in GPR1 to float in FPR0-FPR2
00000000000008D2  6000 9010                             0000000000000010   171          STD   R0,16(0,R9)   Store extended BFP part 1
00000000000008D6  6020 9018                             0000000000000018   172          STD   R2,24(0,R9)   Store extended BFP part 2
00000000000008DA  4130 3010                             0000000000000010   173          LA    R3,16(0,R3)   point to next input value pair
00000000000008DE  4170 7008                             0000000000000008   174          LA    R7,8(0,R7)    Point to next pair of short BFP converted values
00000000000008E2  4180 8010                             0000000000000010   175          LA    R8,16(0,R8)   Point to next pair of long BFP converted values
00000000000008E6  4190 9020                             0000000000000020   176          LA    R9,32(0,R9)   Point to next pair of extended BFP converted values
00000000000008EA  062D                                                     177          BCTR  R2,R13        Convert next input value pair.
00000000000008EC  07FC                                                     178          BR    R12           All converted, return to main line.
                                                                           179 *
                                                                           180 * Convert back to integers
                                                                           181 *
00000000000008EE                                                           182 CVTOUTS  DS    0H
00000000000008EE  4120 0002                             0000000000000002   183          LA    R2,2          Set count of square root result pairs
00000000000008F2  4170 0500                             0000000000000500   184          LA    R7,SHORTRES   Point to start of short BFP results
00000000000008F6  4180 0520                             0000000000000520   185          LA    R8,LONGRES    Point to start of long BFP results
00000000000008FA  4190 0560                             0000000000000560   186          LA    R9,EXTRES     Point to start of extended BFP results
00000000000008FE  4130 0A00                             0000000000000A00   187          LA    R3,ISHBFP     Point to start of short BFP Integer results
0000000000000902  4140 0A40                             0000000000000A40   188          LA    R4,ILNBFP     Point to start of long BFP integer results
0000000000000906  4150 0A80                             0000000000000A80   189          LA    R5,IXTBFP     Point to start of extended BFP integer results
000000000000090A  0DD0                                                     190          BASR  R13,0         Set top of loop
                                                                           191 *
                                                                           192 *     Convert shorts back to integer
                                                                           193 *
000000000000090C  B375 0000                                                194 INTLOOP  LZDR  R0            Zero FPR0
0000000000000910  7800 7000                             0000000000000000   195          LE    R0,0(0,R7)    Get BFP short result RXE
0000000000000914  B398 0000                                                196          CFEBR R0,R0         Convert to integer in r0
0000000000000918  5000 3004                             0000000000000004   197          ST    R0,4(0,R3)    Store integer result
000000000000091C  7800 7004                             0000000000000004   198          LE    R0,4(0,R7)    Get BFP short result RRE
0000000000000920  B398 0000                                                199          CFEBR R0,R0         Convert to integer in r0
0000000000000924  5000 300C                             000000000000000C   200          ST    R0,12(0,R3)   Store integer result
                                                                           201 *
0000000000000928  7800 7008                             0000000000000008   202          LE    R0,8(0,R7)    Get BFP short result RXE
000000000000092C  B3A8 0000                                                203          CGEBR R0,R0         Convert to integer 64 in r0
0000000000000930  E300 3010 0024                        0000000000000010   204          STG   R0,16(0,R3)   Store integer result
0000000000000936  7800 700C                             000000000000000C   205          LE    R0,12(0,R7)   Get BFP short result RRE
000000000000093A  B3A8 0000                                                206          CGEBR R0,R0         Convert to integer 64 in r0
000000000000093E  E300 3018 0024                        0000000000000018   207          STG   R0,24(0,R3)   Store integer result
                                                                           208 *
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     5

      LOC            OBJECT CODE           ADDR1             ADDR2        STMT

0000000000000944  6800 8000                             0000000000000000   209          LD    R0,0(0,R8)    Get BFP long result RXE
0000000000000948  B399 0000                                                210          CFDBR R0,R0         Convert to integer in r0
000000000000094C  5000 4004                             0000000000000004   211          ST    R0,4(0,R4)    Store integer result
0000000000000950  6800 8008                             0000000000000008   212          LD    R0,8(0,R8)    Get BFP long result RRE
0000000000000954  B399 0000                                                213          CFDBR R0,R0         Convert to integer in r0
0000000000000958  5000 400C                             000000000000000C   214          ST    R0,12(0,R4)   Store integer result
                                                                           215 *
000000000000095C  6800 8010                             0000000000000010   216          LD    R0,16(0,R8)   Get BFP long result RXE
0000000000000960  B3A9 0000                                                217          CGDBR R0,R0         Convert to integer 64 in r0
0000000000000964  E300 4010 0024                        0000000000000010   218          STG   R0,16(0,R4)   Store integer result
000000000000096A  6800 8018                             0000000000000018   219          LD    R0,24(0,R8)   Get BFP long result RRE
000000000000096E  B3A9 0000                                                220          CGDBR R0,R0         Convert to integer 64 in r0
0000000000000972  E300 4018 0024                        0000000000000018   221          STG   R0,24(0,R4)   Store integer result
                                                                           222 *
0000000000000978  6800 9000                             0000000000000000   223          LD    R0,0(0,R9)    Get BFP ext. 1st half
000000000000097C  6820 9008                             0000000000000008   224          LD    R2,8(0,R9)    Get BFP ext. 2nd half
0000000000000980  B39A 0000                                                225          CFXBR R0,R0         Convert BFP Ext. to Integer-32
0000000000000984  5000 5004                             0000000000000004   226          ST    R0,4(0,R5)    Store integer result lower word
                                                                           227 *
0000000000000988  6800 9010                             0000000000000010   228          LD    R0,16(0,R9)   Get BFP ext. 1st half
000000000000098C  6820 9018                             0000000000000018   229          LD    R2,24(0,R9)   Get BFP ext. 2nd half
0000000000000990  B3AA 0000                                                230          CGXBR R0,R0         Convert BFP Ext. to Integer-64
0000000000000994  E300 5008 0024                        0000000000000008   231          STG   R0,8(0,R5)    Store integer result
                                                                           232 *
000000000000099A  4170 7010                             0000000000000010   233          LA    R7,16(0,R7)   Point to next short BFP result pair
000000000000099E  4130 3020                             0000000000000020   234          LA    R3,32(0,R3)   Point to next short BFP integer pair
00000000000009A2  4180 8020                             0000000000000020   235          LA    R8,32(0,R8)   Point to next long BFP result pair
00000000000009A6  4140 4020                             0000000000000020   236          LA    R4,32(0,R4)   Point to next long BFP integer pair
00000000000009AA  4190 9020                             0000000000000020   237          LA    R9,32(0,R9)   Point to next ext. BFP result
00000000000009AE  4150 5010                             0000000000000010   238          LA    R5,16(0,R5)   Point to next ext. BFP integer
                                                                           239 *
00000000000009B2  062D                                                     240          BCTR  R2,R13        Convert next pair of BFP values
00000000000009B4  07FC                                                     241          BR    R12           Return to caller
                                                                           242 *
00000000000009B6                                                           243          END
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     6

     SYMBOL        TYPE  VALUE   LENGTH  DEFN  REFERENCES

BFPSQRTS            J    000000    2486    38   56   58   60   77   89   90   91   93   94   95   97   98   99  100
CTLR0               F    000230       4    75   64   65   66
CVTINPUT            H    000882       2   149   67
CVTLOOP             I    000898       4   157
CVTOUTS             H    0008EE       2   182   69
EXTBFP              U    000440       0    91  114  154
EXTRES              U    000560       0    95  111  186
ILNBFP              U    000A40       0    98  188
IMAGE               1    000000    2486     0
INTLOOP             I    00090C       4   194
INTVALS             D    000480       8    79  151
ISHBFP              U    000A00       0    97  187
IXTBFP              U    000A80       0    99  189
LONGBFP             U    000420       0    90  113  153
LONGRES             U    000520       0    94  110  185
R0                  U    000000       1    39   64   66  117  120  121  123  124  128  129  131  132  138  139  158  159  160  161
                                               162  163  166  167  168  169  170  171  194  195  196  197  198  199  200  202  203
                                               204  205  206  207  209  210  211  212  213  214  216  217  218  219  220  221  223
                                               225  226  228  230  231
R1                  U    000001       1    40  118  122  123  130  131  136  138  157  158  160  162  165  166  168  170
R10                 U    00000A       1    49
R11                 U    00000B       1    50
R12                 U    00000C       1    51   67   68   69  144  178  241
R13                 U    00000D       1    52  115  143  155  177  190  240
R14                 U    00000E       1    53
R15                 U    00000F       1    54
R2                  U    000002       1    41  108  140  143  150  164  172  177  183  224  229  240
R3                  U    000003       1    42  109  121  124  126  137  151  157  165  173  187  197  200  204  207  234
R4                  U    000004       1    43  110  129  132  134  188  211  214  218  221  236
R5                  U    000005       1    44  111  139  140  142  189  226  231  238
R6                  U    000006       1    45
R7                  U    000007       1    46  112  120  122  125  152  159  167  174  184  195  198  202  205  233
R8                  U    000008       1    47  113  128  130  133  153  161  169  175  185  209  212  216  219  235
R9                  U    000009       1    48  114  136  137  141  154  163  164  171  172  176  186  223  224  228  229  237
SHORTBFP            U    000410       0    89  112  152
SHORTRES            U    000500       0    93  109  184
SQRTLOOP            I    00081E       4   117
STARTNAN            I    000200       4    64   57
TESTSQRT            H    000800       2   106   68
WAITPSW             X    000220      16    74   70
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     7

MACRO   DEFN  REFERENCES

No defined macros
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     8

   DESC     SYMBOL   SIZE    POS      ADDR

Entry: 0

Image      IMAGE     2486  000-9B5  000-9B5
  Region             2486  000-9B5  000-9B5
    CSECT  BFPSQRTS  2486  000-9B5  000-9B5
ASMA Ver. 0.2.0                                                                                     23 Jun 2016 09:49:51  Page     9

   STMT                            FILE NAME

1     C:\Users\srorso\Documents\GitHub\hyperion\tests\ieee-sqrts.asm


** NO ERRORS FOUND **

